# Generated by Django 5.2.3 on 2025-06-22 21:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Email address (required)', max_length=254, unique=True)),
                ('role', models.CharField(choices=[('STUDENT', 'Student'), ('MODERATOR', 'Moderator')], default='STUDENT', help_text='User role in the debate platform', max_length=10)),
                ('notifications_enabled', models.BooleanField(default=True, help_text='Whether user receives notifications (always True for debate messages)')),
                ('rating', models.IntegerField(default=500, help_text="User's debate rating (starts at 500)")),
                ('bio', models.TextField(blank=True, help_text="User's biography", max_length=500)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_groups', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relationships', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_relationships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='following',
            field=models.ManyToManyField(blank=True, related_name='followers', through='users.UserFollow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_debates', models.IntegerField(default=0)),
                ('debates_won', models.IntegerField(default=0)),
                ('debates_lost', models.IntegerField(default=0)),
                ('debates_drawn', models.IntegerField(default=0)),
                ('total_messages', models.IntegerField(default=0)),
                ('avg_message_length', models.FloatField(default=0.0)),
                ('likes_received', models.IntegerField(default=0)),
                ('likes_given', models.IntegerField(default=0)),
                ('highest_rating', models.IntegerField(default=500)),
                ('lowest_rating', models.IntegerField(default=500)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('total_active_time', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['follower'], name='users_userf_followe_2b72fd_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['following'], name='users_userf_followi_fd7511_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['created_at'], name='users_userf_created_1a71ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'following')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_user_role_36d76d_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['rating'], name='users_user_rating_e07699_idx'),
        ),
        migrations.AddIndex(
            model_name='userstats',
            index=models.Index(fields=['user'], name='users_users_user_id_531add_idx'),
        ),
        migrations.AddIndex(
            model_name='userstats',
            index=models.Index(fields=['total_debates'], name='users_users_total_d_8f5e61_idx'),
        ),
        migrations.AddIndex(
            model_name='userstats',
            index=models.Index(fields=['debates_won'], name='users_users_debates_1d6d69_idx'),
        ),
        migrations.AddIndex(
            model_name='userstats',
            index=models.Index(fields=['last_active'], name='users_users_last_ac_4259e0_idx'),
        ),
    ]
